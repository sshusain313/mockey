'use client';

import { RotateCcw } from 'lucide-react';
import { DownloadButton } from '@/components/DownloadButton';
import { useState, useRef, useEffect, ChangeEvent } from 'react';
import Image from 'next/image';

interface SidebarProps {
  colorValue: string;
  setColorValueAction: (color: string) => void;
  warpingValue: number;
  setWarpingValueAction: (value: number) => void;
  unclipDesign: boolean;
  setUnclipDesignAction: (value: boolean) => void;
  activeDesign: string | null;
  setActiveDesign?: (design: string | null) => void;
  handleDownloadAction: () => void;
  selectedColors?: string[];
  setSelectedColors?: (colors: string[]) => void;
  designScale?: number;
  setDesignScale?: (scale: number) => void;
  designRotation?: number;
  setDesignRotation?: (rotation: number) => void;
}

export function Sidebar({
  colorValue,
  setColorValueAction,
  warpingValue,
  setWarpingValueAction,
  unclipDesign,
  setUnclipDesignAction,
  activeDesign,
  setActiveDesign,
  handleDownloadAction,
  selectedColors = [],
  setSelectedColors,
  designScale = 0.25,
  setDesignScale,
  designRotation = 0,
  setDesignRotation
}: SidebarProps) {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isPro, setIsPro] = useState(false);
  const [filename, setFilename] = useState("cating1.png");
  const [newColorInput, setNewColorInput] = useState("");
  const [isColorMenuOpen, setIsColorMenuOpen] = useState(false);
  const [showPngColorOptions, setShowPngColorOptions] = useState(false);
  const [processedDesign, setProcessedDesign] = useState<string | null>(null);
  const [isColorPaletteOpen, setIsColorPaletteOpen] = useState(false);
  
  const colorMenuRef = useRef<HTMLDivElement>(null);
  const colorTriggerRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        colorMenuRef.current && 
        !colorMenuRef.current.contains(event.target as Node) &&
        colorTriggerRef.current && 
        !colorTriggerRef.current.contains(event.target as Node)
      ) {
        setIsColorMenuOpen(false);
      }
    }
    
    if (isColorMenuOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isColorMenuOpen]);
  
  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && setActiveDesign) {
      if (!file.type.startsWith('image/')) {
        alert('Please upload an image file');
        return;
      }

      const imageUrl = URL.createObjectURL(file);
      setActiveDesign(imageUrl);
      setFilename(file.name);
    }
  };

  const handleUploadClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="w-80 bg-white border-r border-green-500 p-4 overflow-y-auto">
      <DownloadButton 
        onDownload={handleDownloadAction}
        className="w-full bg-green-500 text-white rounded-md py-3 mb-6 flex items-center justify-center gap-2"
      >
        <span className="font-medium">Download</span>
      </DownloadButton>

      <div className="mb-6">
        <h3 className="text-sm font-medium uppercase text-gray-900 mb-2">DESIGN</h3>
        <div className="space-y-2">
          <button 
            onClick={handleUploadClick}
            className="w-full py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors"
          >
            Upload Design
          </button>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            accept="image/*"
            className="hidden"
          />
        </div>
      </div>

      {activeDesign && setDesignScale && setDesignRotation && (
        <div className="mt-4 space-y-4 border-t border-green-100 pt-4">
          {/* Design Scale Slider */}
          <div>
            <div className="flex justify-between items-center mb-1">
              <label className="text-sm font-medium text-gray-700">Scale</label>
              <span className="text-xs text-green-500">{Math.round(designScale * 100)}%</span>
            </div>
            <input 
              type="range" 
              min="0.1" 
              max="0.5" 
              step="0.01" 
              value={designScale}
              onChange={(e) => {
                const newScale = parseFloat(e.target.value);
                if (setDesignScale) {
                  setDesignScale(newScale);
                }
              }}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
          </div>
          
          {/* Design Rotation Slider */}
          <div>
            <div className="flex justify-between items-center mb-1">
              <label className="text-sm font-medium text-gray-700">Rotation</label>
              <span className="text-xs text-green-500">{Math.round(designRotation)}Â°</span>
            </div>
            <input 
              type="range" 
              min="0" 
              max="360" 
              step="1" 
              value={designRotation}
              onChange={(e) => {
                const newRotation = parseInt(e.target.value);
                if (setDesignRotation) {
                  setDesignRotation(newRotation);
                }
              }}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
          </div>
          
          {/* Reset Design Position Button */}
          <div className="flex justify-center">
            <button
              onClick={() => {
                if (setDesignScale) setDesignScale(0.25);
                if (setDesignRotation) setDesignRotation(0);
                // Dispatch an event to center the design
                window.dispatchEvent(new CustomEvent('centerDesign'));
              }}
              className="px-3 py-2 bg-green-100 text-gray-700 rounded-md text-sm hover:bg-green-200 flex items-center gap-1"
            >
              <RotateCcw className="w-3 h-3" />
              <span>Reset Design</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

interface SectionProps {
  designScale?: number;
  setDesignScale?: (scale: number) => void;
  designRotation?: number;
  setDesignRotation?: (rotation: number) => void;
}

export default function Section({
  designScale,
  setDesignScale,
  designRotation,
  setDesignRotation
}: SectionProps) {
  const [colorValue, setColorValue] = useState('#FFFFFF');
  const [warpingValue, setWarpingValue] = useState(0);
  const [unclipDesign, setUnclipDesign] = useState(false);
  const [activeDesign, setActiveDesign] = useState<string | null>(null);
  const [selectedColors, setSelectedColors] = useState<string[]>([]);
  
  const handleDesignChange = (designUrl: string | null) => {
    const event = new CustomEvent('designChanged', { 
      detail: { designUrl } 
    });
    window.dispatchEvent(event);
  };
  
  useEffect(() => {
    if (activeDesign) {
      handleDesignChange(activeDesign);
    }
  }, [activeDesign]);
  
  const handleDownload = () => {
    // Dispatch a custom event that will be caught by the Showcase component
    const event = new CustomEvent('triggerDownload');
    window.dispatchEvent(event);
  };
  
  return (
    <div className="w-80 border-r border-green-500 bg-white">
      <Sidebar
        colorValue={colorValue}
        setColorValueAction={setColorValue}
        warpingValue={warpingValue}
        setWarpingValueAction={setWarpingValue}
        unclipDesign={unclipDesign}
        setUnclipDesignAction={setUnclipDesign}
        activeDesign={activeDesign}
        setActiveDesign={setActiveDesign}
        handleDownloadAction={handleDownload}
        selectedColors={selectedColors}
        setSelectedColors={setSelectedColors}
        designScale={designScale}
        setDesignScale={setDesignScale}
        designRotation={designRotation}
        setDesignRotation={setDesignRotation}
      />
    </div>
  );
}
